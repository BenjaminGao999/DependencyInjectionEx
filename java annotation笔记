
1、参考链接
http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html
https://docs.oracle.com/javase/tutorial/java/annotations/basics.html

2、meta-annotation元注解
1）负责注解其他的注解

2）java5.0定义了4个标准的meta-annotation，被用来提供对其他注解作说明
　  @Target,
    @Retention,
    @Documented,
    @Inherited

　这些类型和它们所支持的类在java.lang.annotation包中可以找到。

  @Retention
  使用这个meta-Annotation可以对 Annotation的“生命周期”限制。
　作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）

               SOURCE:在源文件中有效（即源文件保留）
　                  CLASS:在class文件中有效（即class保留）
　　                      RUNTIME:在运行时有效（即运行时保留）


@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，
因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。
Note: To make the information in @ClassPreamble appear in Javadoc-generated documentation,
you must annotate the @ClassPreamble definition with the @Documented annotation:
// import this to use @Documented
import java.lang.annotation.*;

@Documented
@interface ClassPreamble {

   // Annotation element definitions

}

　@Inherited：

　　@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。

　　注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。

　　当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。

　　

3、自定义annotation
1）
使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。
在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。
方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。
可以通过default来声明参数的默认值。


4、annotation用法
1）
Annotations have a number of uses, among them:

Information for the compiler — Annotations can be used by the compiler to detect errors or suppress warnings.
Compile-time and deployment-time processing — Software tools can process annotation information to generate code, XML files, and so forth.
Runtime processing — Some annotations are available to be examined at runtime.

2)declare and type check


5、types（类、接口、枚举、Annotation类型）
